import { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  ArrowLeft,
  Download,
  FileText,
  Calendar,
  User,
  Clock,
  AlertCircle,
  CheckCircle,
  Eye,
  Share2,
} from "lucide-react";
import { toast } from "react-toastify";
import { Outlet } from "react-router-dom";
import dayjs from "dayjs";
import { handleDetailNotification } from "../../../controller/NotificationController";
// Type definitions based on API response

export default function EmployeeNotificationDetail() {
  const { notificationId } = useParams();
  const navigate = useNavigate();
  const [notification, setNotification] = useState(null);
  const [loading, setLoading] = useState(true);
  const [downloading, setDownloading] = useState(null);

  const fetchDetailNotification = async () => {
    const detailNotify = await handleDetailNotification(notificationId);
    console.log(detailNotify);
    if (detailNotify?.data) {
      setNotification(detailNotify.data);
    }
  };
  useEffect(() => {
    const fetchNotificationDetail = async () => {
      try {
        setLoading(true);
        // TODO: Replace with actual API call
        // const response = await handleGetNotificationDetail(notificationId);
        // setNotification(response.data);

        // Mock data for now
        const mockResponse = {
          status: 200,
          message: "L·∫•y th√¥ng b√°o th√†nh c√¥ng!",
          data: {
            id: notificationId,
            title: "Th√¥ng b√°o l·ªãch thi cu·ªëi k·ª≥ m√¥n C·∫•u tr√∫c d·ªØ li·ªáu",
            content: `K√≠nh g·ª≠i c√°c sinh vi√™n,

Nh√† tr∆∞·ªùng th√¥ng b√°o l·ªãch thi cu·ªëi k·ª≥ m√¥n C·∫•u tr√∫c d·ªØ li·ªáu v√† Gi·∫£i thu·∫≠t nh∆∞ sau:

üìÖ **Th·ªùi gian thi:** Th·ª© 2, ng√†y 15/01/2024 l√∫c 08:00 - 10:00
üìç **ƒê·ªãa ƒëi·ªÉm:** Ph√≤ng A101, T√≤a nh√† A
üìã **H√¨nh th·ª©c:** Thi vi·∫øt tr√™n gi·∫•y
‚è∞ **Th·ªùi gian l√†m b√†i:** 120 ph√∫t

**L∆∞u √Ω quan tr·ªçng:**
- Sinh vi√™n c·∫ßn c√≥ m·∫∑t tr∆∞·ªõc 15 ph√∫t
- Mang theo th·∫ª sinh vi√™n v√† CCCD
- Kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng t√†i li·ªáu, ƒëi·ªán tho·∫°i
- Chu·∫©n b·ªã b√∫t vi·∫øt m√†u xanh ho·∫∑c ƒëen

C√°c t√†i li·ªáu √¥n t·∫≠p v√† ƒë·ªÅ thi m·∫´u ƒë√£ ƒë∆∞·ª£c ƒë√≠nh k√®m b√™n d∆∞·ªõi.

Ch√∫c c√°c b·∫°n √¥n t·∫≠p t·ªët v√† ƒë·∫°t k·∫øt qu·∫£ cao!

Tr√¢n tr·ªçng,
Ph√≤ng ƒê√†o t·∫°o`,
            notificationType: "Th√¥ng b√°o",
            createdAt: "2024-01-10T10:00:00.000Z",
            updatedAt: "2024-01-10T10:00:00.000Z",
            fileNotifications: [
              {
                displayName: "K·∫ø ho·∫°ch h·ªçc t·∫≠p",
                fileName:
                  "https://res.cloudinary.com/dydjh2c7y/raw/upload/v1749972235/file_notifications/3d19fb11-3d0a-4eea-9a2a-30ab2aa54ceb.pdf",
                publicId:
                  "file_notifications/3d19fb11-3d0a-4eea-9a2a-30ab2aa54ceb.pdf",
              },
              {
                displayName: "Danh s√°ch h·ªçc ph·∫ßn",
                fileName:
                  "https://res.cloudinary.com/dydjh2c7y/raw/upload/v1749972235/file_notifications/9fd98ba8-2de6-4bfe-98d5-3a272b7bd435.pdf",
                publicId:
                  "file_notifications/9fd98ba8-2de6-4bfe-98d5-3a272b7bd435.pdf",
              },
              {
                displayName: "ƒê·ªÅ thi m·∫´u m√¥n C·∫•u tr√∫c d·ªØ li·ªáu",
                fileName:
                  "https://res.cloudinary.com/dydjh2c7y/raw/upload/v1749972235/file_notifications/sample-exam.pdf",
                publicId: "file_notifications/sample-exam.pdf",
              },
            ],
            // Additional display fields
            sender: "TS. Nguy·ªÖn VƒÉn A",
            course: "C·∫•u tr√∫c d·ªØ li·ªáu v√† gi·∫£i thu·∫≠t",
            priority: "Cao",
            isRead: false,
            deadline: "2024-01-15T08:00:00.000Z",
          },
        };

        setNotification(mockResponse.data);
      } catch (error) {
        console.error("Error fetching notification:", error);
        toast.error("Kh√¥ng th·ªÉ t·∫£i th√¥ng b√°o");
      } finally {
        setLoading(false);
      }
    };

    if (notificationId) {
      fetchNotificationDetail();
    }
    fetchDetailNotification();
  }, [notificationId]);

  const handleDownloadFile = async (file) => {
    try {
      setDownloading(file.publicId);

      // Create a temporary link to download the file
      const link = document.createElement("a");
      link.href = file.fileName;
      link.download = file.displayName;
      link.target = "_blank";
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    } catch (error) {
      console.error("Download error:", error);
      toast.error("Kh√¥ng th·ªÉ t·∫£i xu·ªëng file");
    } finally {
      setDownloading(null);
    }
  };

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="flex items-center space-x-4">
          <div className="h-8 w-8 bg-gray-200 rounded animate-pulse" />
          <div className="h-6 w-48 bg-gray-200 rounded animate-pulse" />
        </div>
        <div className="space-y-4">
          <div className="h-32 bg-gray-200 rounded animate-pulse" />
          <div className="h-64 bg-gray-200 rounded animate-pulse" />
        </div>
      </div>
    );
  }

  if (!notification) {
    return (
      <div className="flex flex-col items-center justify-center py-12">
        <AlertCircle className="h-12 w-12 text-muted-foreground mb-4" />
        <h3 className="text-lg font-medium mb-2">Kh√¥ng t√¨m th·∫•y th√¥ng b√°o</h3>
        <p className="text-muted-foreground text-center mb-4">
          Th√¥ng b√°o n√†y c√≥ th·ªÉ ƒë√£ b·ªã x√≥a ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p.
        </p>
        <Button variant="ghost" onClick={() => navigate(-1)}>
          <ArrowLeft className="h-4 w-4 mr-2" />
          Quay l·∫°i danh s√°ch
        </Button>
      </div>
    );
  }

  return (
    <div className="h-full max-h-[750px] overflow-y-auto p-10 bg-white">
      <div className="space-y-6 ">
        {/* Header */}
        <div className="flex items-center justify-between">
          <Button variant="ghost" onClick={() => navigate(-1)}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Quay l·∫°i danh s√°ch
          </Button>
        </div>

        {/* Notification Header Card */}
        <Card className="">
          <CardHeader>
            <div className="flex items-start justify-between">
              <div className="flex-1">
                <CardTitle className="text-xl mb-2">
                  {notification.title}
                </CardTitle>
                <CardDescription className="flex items-center space-x-4 text-sm">
                  <div className="flex items-center">
                    <User className="h-4 w-4 mr-1" />
                    {notification.sender || "Ai g·ª≠i"}
                  </div>
                  <div className="flex items-center">
                    <Calendar className="h-4 w-4 mr-1" />
                    {dayjs(notification.createdAt).format("DD/MM/YYYY HH:mm")}
                  </div>
                  {/* {notification.course && (
                    <div className="flex items-center">
                      <FileText className="h-4 w-4 mr-1" />
                      {notification.course}
                    </div>
                  )} */}
                </CardDescription>
              </div>
              <div className="flex items-center space-x-2">
                {notification.notificationType && (
                  <Badge className="bg-blue-100 text-blue-800">
                    {notification.notificationType}
                  </Badge>
                )}
              </div>
            </div>
          </CardHeader>
        </Card>

        {/* Notification Content */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <FileText className="h-5 w-5 mr-2" />
              N·ªôi dung th√¥ng b√°o
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="prose prose-sm max-w-none overflow-y-auto max-h-[350px]">
              <div className="whitespace-pre-wrap text-gray-700 leading-relaxed">
                {notification.content || "Kh√¥ng c√≥ n·ªôi dung chi ti·∫øt."}
              </div>
            </div>
          </CardContent>
        </Card>

        {/* File Attachments */}
        {notification.fileNotifications &&
          notification.fileNotifications.length > 0 && (
            <Card className="overflow-x-auto max-h-[300px]">
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Download className="h-5 w-5 mr-2" />
                  T√†i li·ªáu ƒë√≠nh k√®m ({notification.fileNotifications.length})
                </CardTitle>
                <CardDescription>
                  Nh·∫•n v√†o t√™n file ƒë·ªÉ t·∫£i xu·ªëng
                </CardDescription>
              </CardHeader>
              <CardContent className="max-h-[300px] overflow-y-auto">
                <div className="space-y-3">
                  {/* {notification.fileNotifications.map((file, index) => (
                    <div
                      key={index}
                      className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 transition-colors "
                    >
                      <div className="flex items-center space-x-3 ">
                        <div className="p-2 bg-blue-100 rounded-lg">
                          <FileText className="h-5 w-5 text-blue-600" />
                        </div>
                        <div>
                          <h4 className="font-medium text-gray-900">
                            {file.displayName}
                          </h4>
                          <p className="text-sm text-gray-500">PDF Document</p>
                        </div>
                      </div>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleDownloadFile(file)}
                        disabled={downloading === file.publicId}
                      >
                        {downloading === file.publicId ? (
                          <>
                            <div className="animate-spin h-4 w-4 mr-2 border-2 border-gray-300 border-t-gray-600 rounded-full" />
                            ƒêang t·∫£i...
                          </>
                        ) : (
                          <>
                            <Download className="h-4 w-4 mr-2" />
                            T·∫£i xu·ªëng
                          </>
                        )}
                      </Button>
                    </div>
                  ))} */}
                  {notification.fileNotifications.map((file, index) => (
                    <div
                      key={index}
                      className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 transition-colors"
                    >
                      <div className="flex items-center space-x-3">
                        <div className="p-2 bg-blue-100 rounded-lg">
                          <FileText className="h-5 w-5 text-blue-600" />
                        </div>
                        <div>
                          <a
                            href={file.fileName}
                            download={file.displayName}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="font-medium text-blue-600 hover:underline"
                          >
                            {file.displayName}
                          </a>
                          <p className="text-sm text-gray-500 break-all">
                            PDF Document
                          </p>
                        </div>
                      </div>

                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleDownloadFile(file)}
                        disabled={downloading === file.publicId}
                      >
                        {downloading === file.publicId ? (
                          <>
                            <div className="animate-spin h-4 w-4 mr-2 border-2 border-gray-300 border-t-gray-600 rounded-full" />
                            ƒêang t·∫£i...
                          </>
                        ) : (
                          <>
                            <Download className="h-4 w-4 mr-2" />
                            T·∫£i xu·ªëng
                          </>
                        )}
                      </Button>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

        <Outlet />
      </div>
    </div>
  );
}
